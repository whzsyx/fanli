name: Build and Publish Docker Image

on:
  release:
    types: [published]

jobs:
  build:
    # 指定使用 arm64 主机
    runs-on: [self-hosted, arm64]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Wait for a few seconds
      run: sleep 10  # 等待10秒钟，可以根据需要调整时间

    - name: Debug Info
      run: |
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_REF: $GITHUB_REF"

    - name: Download release .tar.gz
      run: |
        RELEASE_TAG=${GITHUB_REF#refs/tags/}
        echo "RELEASE_TAG: $RELEASE_TAG"
        RELEASE_URL=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${RELEASE_TAG} | jq -r '.assets[] | select(.name | endswith("_arm64.tar.gz")) | .browser_download_url')
        echo "Release URL: $RELEASE_URL"
        if [ -z "$RELEASE_URL" ]; then
          echo "No release asset found for architecture: arm64"
          exit 1
        fi
        curl -L $RELEASE_URL -o release_arm64.tar.gz

    - name: Create extraction directory
      run: mkdir -p ./app/autMan

    - name: Extract release .tar.gz
      run: tar -xzf release_arm64.tar.gz -C ./app/autMan --strip-components=1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract version number from Git tag
      id: extract_version
      run: |
        RELEASE_VERSION=${GITHUB_REF#refs/tags/}
        echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
        echo "Extracted RELEASE_VERSION: ${RELEASE_VERSION}"

    - name: Build Docker image
      run: |
        docker build --platform linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/autman:${{ env.RELEASE_VERSION }}-arm64 -f Dockerfile .
        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/autman:${{ env.RELEASE_VERSION }}-arm64 ${{ secrets.DOCKER_HUB_USERNAME }}/autman:latest-arm64

    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/autman:${{ env.RELEASE_VERSION }}-arm64
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/autman:latest-arm64

    - name: Create and push manifest
      run: |
        docker manifest create ${{ secrets.DOCKER_HUB_USERNAME }}/autman:${{ env.RELEASE_VERSION }} \
          ${{ secrets.DOCKER_HUB_USERNAME }}/autman:${{ env.RELEASE_VERSION }}-arm64
        docker manifest push ${{ secrets.DOCKER_HUB_USERNAME }}/autman:${{ env.RELEASE_VERSION }}

        docker manifest create ${{ secrets.DOCKER_HUB_USERNAME }}/autman:latest \
          ${{ secrets.DOCKER_HUB_USERNAME }}/autman:latest-arm64
        docker manifest push ${{ secrets.DOCKER_HUB_USERNAME }}/autman:latest
